// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ideas     Idea[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String?
  tags        String[]
  status      IdeaStatus @default(DRAFT)
  
  // AI Analysis Results
  aiAnalysis  Json?    // Structured AI insights
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mindMap     MindMap?
  tasks       Task[]

  @@map("ideas")
}

model MindMap {
  id        String   @id @default(cuid())
  nodes     Json     // React Flow nodes data
  edges     Json     // React Flow edges data
  layout    Json?    // Layout configuration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ideaId    String   @unique

  // Relations
  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@map("mind_maps")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        TaskType   @default(TASK)
  priority    Priority   @default(MEDIUM)
  status      TaskStatus @default(TODO)
  
  // Jira-style fields
  storyPoints Int?
  acceptanceCriteria String[]
  
  // Hierarchy
  parentId    String?
  order       Int        @default(0)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  ideaId      String

  // Relations
  idea     Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  parent   Task?  @relation("TaskHierarchy", fields: [parentId], references: [id])
  children Task[] @relation("TaskHierarchy")

  @@map("tasks")
}

// Enums
enum IdeaStatus {
  DRAFT
  ANALYZING
  STRUCTURED
  PLANNED
  ARCHIVED
}

enum TaskType {
  EPIC
  STORY
  TASK
  BUG
  SUBTASK
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
}